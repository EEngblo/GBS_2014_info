int N = 25;
int gsize = 20;

int V = 1;
int H = 2;

void setup() {
	size(501, 501); // 501*501 픽셀에 그림을 그림
	noLoop(); // draw 함수는 한번만 실행됨
	background(255); // 배경은 흰 색임
	stroke(0); // 선은 검은 색임

	divide(0, 0, N, N); // 
}

void divide(int r1, int c1, int r2, int c2) {
	int cr, rr;

	/*****************************************************/
	int dir = divDir(r1, c1, r2, c2);
	//
	//	사이에 선을 그을 수 없들 정도로 작게 분할되었을 땐, c2-c1이 1픽셀 이내이면 0을 되돌려 줌 => 재귀호출 중단
	//	분할된 부분의 폭보다 높이가 크면 1을 되돌려 줌
	//	분할된 부분의 폭보다 높이가 같거나 작으면 2를 되돌려 줌
	//
	//  r로 시작하는 좌표는 x, c로 시작하는 좌표는 y값을 의미함
	//
	//	맨 처음 divide 함수가 호출될 때의 return값은 2임
	/*****************************************************/

	// 폭보다 높이가 큰 경우
	if (dir == V) {

		cr = randomInt(c1 + 1, c2 - 1); // cr = c1 초과 c2 이하의 랜덤한 정수
		rr = randomInt(r1, r2 - 1); // rr = r1 이상 r2 이하의 랜덤한 정수


		// c1와 c2 사이의 랜덤한 값을 x값으로 하고, r1에서부터 r1과 r2 사이의 랜덤한 값의 y축까지 수직선을 그림
		gridLine(cr, r1, cr, rr); 

		// 윗 줄에서 그린 선의 끝에서 아래쪽으로 한 단위픽셀 내려간 곳에서부터 아래쪽 r2까지 수직선을 그림
		gridLine(cr, rr + 1, cr, r2); 


		// 원래 호출된 함수의 좌측 상단 좌표는 고정한 채 높이를 줄여서 재귀호출
		divide(r1, c1, r2, cr);

		// 원래 호출된 함수의 우측 하단 좌표는 고정한 채 높이를 줄여서 재귀호출
		divide(r1, cr, r2, c2);

	}

	// 폭보다 높이가 작거나 같은 경우
	else if (dir == H) {

		cr = randomInt(c1, c2 - 1); // cr = c1 이상 c2 미만의 랜덤한 정수
		rr = randomInt(r1 + 1, r2 - 1); // rr = r1 초과 r2 이하의 랜덤한 정수


		// r1과 r2 사이의 랜덤한 값을 y축으로 해서 c1에서부터 c1과 c2 사이의 랜덤한 값의 x축까지 수평선을 그림
		gridLine(c1, rr, cr, rr);

		// 위에서 그린 선의 끝에서 오른쪽으로 한 단위픽셀 내려간 곳에서부터 오른쪽 r2까지 수평선을 그림
		gridLine(cr + 1, rr, c2, rr);


		// 원래 호출된 함수의 좌측 상단 좌표는 고정한 채 폭을 줄여서 재귀호출
		divide(r1, c1, rr, c2);

		// 원래 호출된 함수의 우측 하단 좌표는 고정한 채 폭을 줄여서 재귀호출
		divide(rr, c1, r2, c2);

	}
	else { // 더 이상 선을 그릴 수 없을 정도로 작게 분할되면 재귀호출을 중단함
		return;
	}

	/*
	결론적으로, 항상 한 단위픽셀씩을 띈 채 미로를 그리기 때문에 하나의 모서리에서 다른 모서리로 탈출이 가능하다.
	*/
}

int divDir(int r1, int c1, int r2, int c2) { // 위에서 자세히 설명함
	int dr = r2 - r1;
	int dc = c2 - c1;
	if (dr <= 1 || dc <= 1)
		return 0;
	else if (dr < dc)
		return V;
	else
		return H;
}


int randomInt(int min, int max) { // 인수 min ~ 인수 max + 1까지의 자연수 중 하나를 랜덤하게 뽑아냄
	return round(random(min - 0.5, max + 0.5));
	
}


void gridLine(int r1, int c1, int r2, int c2) { // (r1,c1)에서 (r2,c2)까지 선을 그림
	line(r1*gsize, c1*gsize, r2*gsize, c2*gsize); 
}
